<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sm.dao.BodyQualificationsMapper" >
  <resultMap id="BaseResultMap" type="com.sm.model.BodyQualifications" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="certificate_type" property="certificateType" jdbcType="VARCHAR" />
    <result column="certificate_picture" property="certificatePicture" jdbcType="VARCHAR" />
    <result column="registration_number" property="registrationNumber" jdbcType="VARCHAR" />
    <result column="unit_name" property="unitName" jdbcType="VARCHAR" />
    <result column="legal_person" property="legalPerson" jdbcType="VARCHAR" />
    <result column="premises" property="premises" jdbcType="VARCHAR" />
    <result column="license_period" property="licensePeriod" jdbcType="VARCHAR" />
    <result column="sid" property="sid" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, certificate_type, certificate_picture, registration_number, unit_name, legal_person, 
    premises, license_period, sid
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.sm.model.BodyQualificationsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from body_qualifications
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from body_qualifications
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from body_qualifications
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.sm.model.BodyQualificationsExample" >
    delete from body_qualifications
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.sm.model.BodyQualifications" >
    insert into body_qualifications (id, certificate_type, certificate_picture, 
      registration_number, unit_name, legal_person, 
      premises, license_period, sid
      )
    values (#{id,jdbcType=INTEGER}, #{certificateType,jdbcType=VARCHAR}, #{certificatePicture,jdbcType=VARCHAR}, 
      #{registrationNumber,jdbcType=VARCHAR}, #{unitName,jdbcType=VARCHAR}, #{legalPerson,jdbcType=VARCHAR}, 
      #{premises,jdbcType=VARCHAR}, #{licensePeriod,jdbcType=VARCHAR}, #{sid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.sm.model.BodyQualifications" >
    insert into body_qualifications
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="certificateType != null" >
        certificate_type,
      </if>
      <if test="certificatePicture != null" >
        certificate_picture,
      </if>
      <if test="registrationNumber != null" >
        registration_number,
      </if>
      <if test="unitName != null" >
        unit_name,
      </if>
      <if test="legalPerson != null" >
        legal_person,
      </if>
      <if test="premises != null" >
        premises,
      </if>
      <if test="licensePeriod != null" >
        license_period,
      </if>
      <if test="sid != null" >
        sid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="certificateType != null" >
        #{certificateType,jdbcType=VARCHAR},
      </if>
      <if test="certificatePicture != null" >
        #{certificatePicture,jdbcType=VARCHAR},
      </if>
      <if test="registrationNumber != null" >
        #{registrationNumber,jdbcType=VARCHAR},
      </if>
      <if test="unitName != null" >
        #{unitName,jdbcType=VARCHAR},
      </if>
      <if test="legalPerson != null" >
        #{legalPerson,jdbcType=VARCHAR},
      </if>
      <if test="premises != null" >
        #{premises,jdbcType=VARCHAR},
      </if>
      <if test="licensePeriod != null" >
        #{licensePeriod,jdbcType=VARCHAR},
      </if>
      <if test="sid != null" >
        #{sid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.sm.model.BodyQualificationsExample" resultType="java.lang.Integer" >
    select count(*) from body_qualifications
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update body_qualifications
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.certificateType != null" >
        certificate_type = #{record.certificateType,jdbcType=VARCHAR},
      </if>
      <if test="record.certificatePicture != null" >
        certificate_picture = #{record.certificatePicture,jdbcType=VARCHAR},
      </if>
      <if test="record.registrationNumber != null" >
        registration_number = #{record.registrationNumber,jdbcType=VARCHAR},
      </if>
      <if test="record.unitName != null" >
        unit_name = #{record.unitName,jdbcType=VARCHAR},
      </if>
      <if test="record.legalPerson != null" >
        legal_person = #{record.legalPerson,jdbcType=VARCHAR},
      </if>
      <if test="record.premises != null" >
        premises = #{record.premises,jdbcType=VARCHAR},
      </if>
      <if test="record.licensePeriod != null" >
        license_period = #{record.licensePeriod,jdbcType=VARCHAR},
      </if>
      <if test="record.sid != null" >
        sid = #{record.sid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update body_qualifications
    set id = #{record.id,jdbcType=INTEGER},
      certificate_type = #{record.certificateType,jdbcType=VARCHAR},
      certificate_picture = #{record.certificatePicture,jdbcType=VARCHAR},
      registration_number = #{record.registrationNumber,jdbcType=VARCHAR},
      unit_name = #{record.unitName,jdbcType=VARCHAR},
      legal_person = #{record.legalPerson,jdbcType=VARCHAR},
      premises = #{record.premises,jdbcType=VARCHAR},
      license_period = #{record.licensePeriod,jdbcType=VARCHAR},
      sid = #{record.sid,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
   <update id="deleteCertificatePic" parameterType="com.sm.model.BodyQualifications" >
  update body_qualifications
  set certificate_picture = #{certificatePicture,jdbcType=VARCHAR}
  where sid = #{sid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sm.model.BodyQualifications" >
    update body_qualifications
    <set >
      <if test="certificateType != null" >
        certificate_type = #{certificateType,jdbcType=VARCHAR},
      </if>
      <if test="certificatePicture != null" >
        certificate_picture = #{certificatePicture,jdbcType=VARCHAR},
      </if>
      <if test="registrationNumber != null" >
        registration_number = #{registrationNumber,jdbcType=VARCHAR},
      </if>
      <if test="unitName != null" >
        unit_name = #{unitName,jdbcType=VARCHAR},
      </if>
      <if test="legalPerson != null" >
        legal_person = #{legalPerson,jdbcType=VARCHAR},
      </if>
      <if test="premises != null" >
        premises = #{premises,jdbcType=VARCHAR},
      </if>
      <if test="licensePeriod != null" >
        license_period = #{licensePeriod,jdbcType=VARCHAR},
      </if>
      <if test="sid != null" >
        sid = #{sid,jdbcType=INTEGER},
      </if>
    </set>
    where sid = #{sid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sm.model.BodyQualifications" >
    update body_qualifications
    set certificate_type = #{certificateType,jdbcType=VARCHAR},
      certificate_picture = #{certificatePicture,jdbcType=VARCHAR},
      registration_number = #{registrationNumber,jdbcType=VARCHAR},
      unit_name = #{unitName,jdbcType=VARCHAR},
      legal_person = #{legalPerson,jdbcType=VARCHAR},
      premises = #{premises,jdbcType=VARCHAR},
      license_period = #{licensePeriod,jdbcType=VARCHAR},
      sid = #{sid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>